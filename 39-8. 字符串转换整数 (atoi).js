/**
 * 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。

函数 myAtoi(string s) 的算法如下：

读入字符串并丢弃无用的前导空格
检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
返回整数作为最终结果。
注意：

本题中的空白字符只包括空格字符 ' ' 。
除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
 

示例 1：

输入：s = "42"
输出：42
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 1 步："42"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："42"（读入 "42"）
           ^
解析得到整数 42 。
由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
示例 2：

输入：s = "   -42"
输出：-42
解释：
第 1 步："   -42"（读入前导空格，但忽视掉）
            ^
第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
             ^
第 3 步："   -42"（读入 "42"）
               ^
解析得到整数 -42 。
由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
示例 3：

输入：s = "4193 with words"
输出：4193
解释：
第 1 步："4193 with words"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："4193 with words"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："4193 with words"（读入 "4193"；由于下一个字符不是一个数字，所以读入停止）
             ^
解析得到整数 4193 。
由于 "4193" 在范围 [-231, 231 - 1] 内，最终结果为 4193 。
示例 4：

输入：s = "words and 987"
输出：0
解释：
第 1 步："words and 987"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："words and 987"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
         ^
第 3 步："words and 987"（由于当前字符 'w' 不是一个数字，所以读入停止）
         ^
解析得到整数 0 ，因为没有读入任何数字。
由于 0 在范围 [-231, 231 - 1] 内，最终结果为 0 。
示例 5：

输入：s = "-91283472332"
输出：-2147483648
解释：
第 1 步："-91283472332"（当前没有读入字符，因为没有前导空格）
         ^
第 2 步："-91283472332"（读入 '-' 字符，所以结果应该是负数）
          ^
第 3 步："-91283472332"（读入 "91283472332"）
                     ^
解析得到整数 -91283472332 。
由于 -91283472332 小于范围 [-231, 231 - 1] 的下界，最终结果被截断为 -231 = -2147483648 。
 

提示：

0 <= s.length <= 200
s 由英文字母（大写和小写）、数字（0-9）、' '、'+'、'-' 和 '.' 组成
通过次数280,916提交次数1,310,876

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
/**
 * @param {string} s
 * @return {number}
 */
var myAtoi = function(s) {
  s = s.trim()
  let str = ''
  const isOperator = str => (str === '-' || str === '+')
  const map = {
    '-': 1, '+': 1, '0': 1,
    '1': 1, '2': 1, '3': 1,
    '4': 1, '5': 1, '6': 1,
    '7': 1, '8': 1, '9': 1,
  }

  // 读取字符串
  for (const char of s) {
    if (map[char]) {
      if (str.length > 0 && isOperator(char)) {
        break
      } else {
        // 如果是合法的字符串
        str += char
      }
    } else {
      break;
    }
  }

  if (!str || isOperator(str)) { str = '0' }
  let unsignedNum = str // 无符号字符串数字
  let sign = '+' // 符号位
  if (isOperator(str[0])) {
    unsignedNum = str.slice(1)
    sign = str[0]
  }
  if (unsignedNum[0] === '0') {
    // fix: "0000000000012345678"
    unsignedNum = unsignedNum.replace(/^0+/, '') || '0'
  }

  // 解析字符串
  if (unsignedNum.length > 10) {
    return sign === '-' ? -2147483648 : 2147483647
  } else if (unsignedNum.length === 10) {
    unsignedNum = unsignedNum.slice(0, 10)

    // 控制 数值不能超过 [2^31, 2^31 - 1]，模拟 C++ 处理 32 位数字的情况
    if (Number(unsignedNum[0]) > 2) {
      return sign === '+' ? 2147483647 : -2147483648
    } else if (Number(unsignedNum[0]) === 2) {
      if (sign === '-') {
        return Number(unsignedNum.slice(1)) >= 147483648 ? -2147483648 : Number(sign + unsignedNum)
      } else {
        return Number(unsignedNum.slice(1)) >= 147483647 ? 2147483647 : Number(sign + unsignedNum)
      }
    } else {
      return Number(sign + unsignedNum)
    }
  } else {
    return Number(sign + unsignedNum)
  }
};

// 注意正负值的上下线值是不一样的 [2^31, 2^31 - 1] = [-2147483648, 2147483647]

const s = "  0000000000012345678"
// const s = "21474836460"
// const s = "+1"
// const s = "+-12"
// const s = "-91283472332333"
// const s = "words and 987"
// const s = "4193 with words"
// const s = "   -42"
// const s = "42"
console.log(myAtoi(s));